\documentclass[[11pt,a4paper]{article}
\usepackage{parskip}
\setlength{\parindent}{0pt} % default 15pt
\setlength{\parskip}{8pt}

\newcommand\requirement[2]{\subsection{#2}\label{#1}}
\newcommand\explanation{\noindent\textbf{Explanation: }}
\newcommand\reason{\noindent\textbf{Reason: }}
\newcommand\criterion{\noindent\textbf{Fit criterion: }}
\newcommand\dependencies{\noindent\textbf{Dependencies: }}

\title{LocalBox (server component) }

\author{Volere Requirements Engineering Document}


\begin{document}

\titlepage \maketitle

\section{Project drivers}
Het doel van de LocalBox server is het aanbieden van een mechanisme om digitale bestanden op een veilige manier op te slaan en te delen. De LocalBox server wordt gevormd door een software implementatie en daarmee samenhangende use cases waarin het gebruik van de server component is toegelicht. De use cases geven aan hoe de verschillende client apps zich moeten gedragen.

De LocalBox server wordt ontwikkeld op initiatief van de stichting WijDelenVeilig.org.

\section{Project constraints} 
Alle specifiek voor de software implementatie ontwikkelde code wordt vrijgegeven onder EUPL. Bij de implementatie wordt alleen gebruik gemaakt van bibliotheken en componenten van derden indien de gebruikte licentie van deze bibliotheken of componenten niet in strijd is met het gebruik van EUPL in dit project.

\section{Functional requirements}

% Volere template:

%\requirement{title}{Requirement Title}

	%\explanation Description of this requirement

	%\reason Why we need this requirement

	%\criterion Measurement of how can be tested that the requirement is met

	%\dependencies \ref{title}

\requirement{ccrypto}{LocalBox doet client-side encryptie}

\description De LocalBox server is transparant t.a.v. de opgeslagen documenten, of deze nu versleuteld zijn of niet. Versleuteling van bestanden is een aspect dat zich volledig afspeelt in de client software. Alleen op het niveau van metagegevens van documenten of gebruikers zijn elementen die het proces van encryptie ondersteunen. 

In de use cases wordt beschreven hoe de clients met deze gegevens dienen om te gaan om het delen van bestanden mogelijk te maken.

\reason Serverside cryptografie maakt dat de server in staat moet zijn het bestand te kunnen decoderen. Dit vormt een beveiligingsricico.

\criterion Encryptie wordt op de sync of de client gedaan, en is hiervoor niet afhankelijk van de server.


\requirement{blindserver}{LocalBox Server is niet in staat opgeslagen documenten te lezen}
	
\reason Indien de server niet zelf de bestanden kan lezen kan iemand die de server heeft overgenomen dit ook niet zonder extra informatie
	
\criterion De server mag nooit in bezit zijn van alle onderdelen benodigd voor het decoderen van een bestand.
	
\dependencies \ref{ccrypto} \ref{privkey}

\requirement{saml}{SAML authenticatie}
\explanation In plaats van een ingebouwde authenticatie zou de LocalBox server op externe (Pleio/LinkedIn/...) autorisaties kunnen vertrouwen (volgens mij al voorzien). De OAuth calls zouden dan uit de API gehaald kunnen worden. Eventueel de OAuth functionaliteit in een andere subpad (bijv. \texttt{/lox\_auth}) alsnog aanbieden, het wordt een tweede module. De clients/apps kunnen per account/sessie twee URL's specifieren: \'{e}\'{e}n voor de opslag (de \texttt{lox\_api} API) en \'{e}\'{e}n voor authenticatie (bijv. een OAuth server, eventueel dezelfde server maar met een ander URI pad). Security aspect: maakt scheiding van authenticatie en data mogelijk, de data wordt op de LocalBox server geanonimiseerd.

\reason SAML laat externe authenticatie toe, onder andere via Active Directory or LDAP. Dit maakt het voorbereiden van deployment voor grote organisaties makkelijker en beter controleerbaar. 

\criterion{Men kan aan LocalBox authenticeren met SAML}

\requirement{authlimit}{LocalBox limiteert het maximum aantal authenticatiepogingen}

\reason zonder limieten kan een aanvaller oneindig proberen een wachtwoord te kraken
	
\criterion herhaaldelijk pogen in te loggen zorgt dat opnieuw proberen niet meer werkt.


\requirement{privkey}{Geen Private Keys op de Server}

\reason De private key kan worden gebruikt om de files te decrypten. De server heeft deze keys ook niet nodig om te functioneren. 

\explanation Er moet een use case uitgewerkt worden waarin de private key per device ook echt als private key wordt toegepast en niet meer hoeft te worden gedeeld met de servers om meerdere devices per gebruiker toe te kunnen passen. Dit brengt met zich mee dat onder een gebruiker meerdere public keys kunnen worden gepubliceerd: een primaire of eerste public key en secundaire public keys. Ook moet in de use case vastgesteld worden wie additionele versleuteling van de AES keys voor zijn rekening neemt wanneer er nieuwe secundaire public keys worden toegevoegd.
	
\criterion Er is geen ondersteuning voor een functie om een private key te kopi\"{e}ren


\requirement{clientreg}{LocalBox Clients kunnen zichzelf bij de server registreren}

\reason Deze registratie slag maakt dat de server op de hoogte is dat bestanden voor deze nieuwe client moeten worden encrypt.

\criterion{Er is een API entry voor client registratie}

\requirement{upload}{LocalBox clients moeten encrypte bestanden kunnen uploaden.}


\reason LocalBox gaat over het delen van data; uploaden van data is daar een essentieel onderdeel van

\criterion Een file kan worden geupload

\requirement{download}{LocalBox clients moeten encrypte bestanden kunnen downloaden}

\reason LocalBox gaat over het delen van data; downloaden van data is daar een essentieel onderdeel van

\criterion een file kan worden gedownload

\requirement{sharing}{Bestanden op de LocalBox server kunnen met andere gebruikers worden gedeeld}

\reason Data van de ene naar de andere user verplaatsen is waar LocalBox over gaat.

\criterion user2 kan een file downloaden die user1 heeft geupload.

\dependencies \ref{download} \ref{upload}

\requirement{users}{gebruikers moeten zich kunnen authenticeren (zonder private key)}

\reason hoewel er een private key is die aan een gebruiker gekoppelt kan worden
is dit niet de enige vorm van identificatie. In de toekomstsituatie waar
geen private keys op de server staan is het belangrijk dat alle public
keys van een gebruiker aan specifiek die gebruiker wordt gekoppelt.

\criterion Gebruiker kan inloggen zonder private key


\requirement{adminuser}{Administrators kunnen gebruikers aanmaken voor LocalBox}

\reason om niet van een initiele lijst van gebruikers afhankelijk te zijn moet het mogelijk zijn gebruikers aan te maken en verweideren terwijl LocalBox draait.

\criterion er is een manier om gebruikers aan te maken.


\requirement{versienummer}{Versienummer in API}
\reason Er zou een API call toegevoegd worden waarin het versienummer en eventuele andere servergegevens (bijv. 'capabilities' zoals in bepaalde protocollen worden genoemd) kunnen worden opgevraagd. Op die manier kan een client/app anticiperen op verschillende versies (en eigenschappen van) servers. Versienummers kunnen opgehoogd worden (en capabilities uitgebreid).
\criterion er is een call die de versie van het protocol aangeeft


\requirement{subpad}{API calls onder \'{e}\'{e}n subpad}
\reason De lox\_api calls zijn nu grotendeels ondergebracht onder de URI \texttt{http(s)://<hostname>/lox\_api}. Enkele uitgezonderd: met name \texttt{register\_app} en notifications (of zijn die niet voor een client/app?). In feite zou alle (door clients/apps te gebruiken) API calls onder hetzelfde \texttt{lox\_api} subpad moeten worden ondergebracht. Security aspect: API calls worden als module gegroepeerd aangeboden, de server kan beperkt worden tot alleen de API calls en bijv. de webinterface (als andere module) achterwege laten.
\criterion alle calls voor de API zijn onder een pad

\requirement{wegint}{Webinterface scheiden van opslag}
\reason De vorige suggestie verder door trekkend zou de scheiding ook door getrokken kunnen worden: de webinterface zou zelf als client de lox\_api API moeten kunnen gebruiken en zo op een andere server (zelfs binnen een geheel ander domein) geïnstalleerd aangeboden kunnen worden.
\criterion de webinterface kan uit staan op de server


\requirement{reg}{Registreren device}
\reason Om toegang tot de data vanaf meerdere devices te beperken zal ieder device (resp. vers geïnstalleerde app) een eenmalig nieuw gegenereerd UUID mee kunnen geven (in bijv. een \texttt{User-Agent}, \texttt{From} of \texttt{X-*} header field). De server accepteert de toegang niet totdat er via e-mail een validatie URL is aangeklikt. Vanaf dat moment is het device geregistreerd en gekoppeld aan een gebruiker. Het is een lichte variant van twee factor authenticatie.

\requirement{revoke}{Public key revocation}
\reason Is mij nog niet helemaal helder hoe hier op te anticiperen. Misschien een PGP key server (-achtige) functionaliteit ook afscheiden van de \texttt{lox\_api} als separate module (\texttt{lox\_pgp})? Anders in ieder geval een use case hoe om te gaan met key revocation.

\section{Nonfunctional requirements}

\requirement{partialtransfer}{Support for partial file transfer}

\explanation

\reason Heeft niks van doen met security maar wel met stabiliteit: als er grote bestanden gekopieerd moeten worden (stel een filmpje van een paar Gig) dan is de kans groot dat er iets misgaat (verbinding verbroken doordat de laptop in slaapstand gaat o.i.d.) en het is dan vervelend dat de file transfer telkens opnieuw moet beginnen. Door de \texttt{Range/Content-Range} headers te implementeren (byte serving) kan een afgebroken file transfer gecontinueerd worden. Dit zou als een 'capability' (en daarmee aan en uit te zetten) gespecificeerd kunnen worden

\criterion 

\dependencies Geen

\requirement{performance}{Performance}

\explanation

\reason LocalBox kan ten minste $n$ simultane gebruikers aan

\criterion 

\dependencies Geen

\section{Project issues}

\requirement{fileenc}{Encryptie van bestanden}

\explanation Encryptie van bestanden gebeurt op bestandsniveau

\reason

\criterion 

\dependencies Geen

\requirement{defconf}{Instelbaar beveiligingsniveau}

\explanation Door de beveiliging te koppelen aan bestandsrubricering wordt het beveiligen van bestanden voor de gbruiker transparanter in gebruik. Niet zozeer de beveiliging wordt 

\reason Mogelijkheid van security niveau te wisselen op basis van rubricering van bestanden.

\criterion De rubricering is als eigenschap opgenomen in de metagegevens van een file

\dependencies Geen










\end{document}
